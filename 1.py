from manim import *
import numpy as np

class Ejercicio1(ThreeDScene):
    def construct(self):
        # Demostrar las formulas
        plano_f = Text("Tenemos el plano: P = a + tu + sv", font_size=24, color=WHITE)
        recta_f = Text("Tenemos la recta: R = d + lw", font_size=24, color=WHITE)
        p_r_igualdad1 = MathTex("P = R")
        p_r_igualdad2 = MathTex("a + tu + sv = d + lw")
        plano_f.next_to(recta_f, UP)
        p_r_igualdad1.next_to(recta_f, DOWN)
        p_r_igualdad2.next_to(p_r_igualdad1, DOWN)
        textos = VGroup(plano_f, recta_f)
        formulas = VGroup(p_r_igualdad1, p_r_igualdad2)
        self.add_fixed_in_frame_mobjects(textos)
        self.wait(2)
        self.add_fixed_in_frame_mobjects(formulas)
        self.wait(2)
        self.remove(textos, formulas)

        # Mostrando cambios de la igualdad
        p_r_igualdad2 = MathTex("a + tu + sv = d + lw")
        p_r_igualdad2.shift(1*UP)
        self.add_fixed_in_frame_mobjects(p_r_igualdad2)
        self.wait(2)

        p_r_igualdad3 = MathTex("=> a - d = lw - tu - sv ... (1)")
        p_r_igualdad3.next_to(p_r_igualdad2, 2*DOWN)
        self.add_fixed_in_frame_mobjects(p_r_igualdad3)
        self.wait(2)

        self.remove(p_r_igualdad2, p_r_igualdad3)

        # Demostrar la formula de l

        # Demostracion de que (UxV)*U = 0 y demas
        texto1 = Text("Supongamos lo siguiente:", font_size=24)
        texto1.shift(2*UP).set_color(WHITE)
        u = MathTex("u =")
        v1 = Matrix([["a"], ["b"], ["c"]])
        u.next_to(v1, LEFT)
        t_vectorU = VGroup(u, v1)
        t_vectorU.next_to(texto1, 2*DOWN)
        t_vectorU.shift(2.8*LEFT)
        v = MathTex("v =")
        v2 = Matrix([["d"], ["e"], ["f"]])
        v.next_to(v2, LEFT)
        t_vectorV = VGroup(v, v2)
        t_vectorV.next_to(t_vectorU, 2*RIGHT)
        w = MathTex("w =")
        v3 = Matrix([["g"], ["h"], ["n"]])
        w.next_to(v3, LEFT)
        t_vectorW = VGroup(w, v3)
        t_vectorW.next_to(t_vectorV, 2 * RIGHT)
        Vectores = VGroup( t_vectorU, t_vectorV, t_vectorW)
        Vectores.set_color(WHITE)
        aclaracion1 = Text("(las variables son distintas a las ecuaciones previas)", font_size=24)
        aclaracion1.next_to(Vectores, 2 * DOWN)
        aclaracion1.set_color(RED)
        self.add_fixed_in_frame_mobjects(texto1)
        self.wait(1)
        self.add_fixed_in_frame_mobjects(Vectores)
        self.wait(2)
        self.add_fixed_in_frame_mobjects(aclaracion1)
        self.wait(2)
        self.remove(texto1, Vectores, aclaracion1)

        # Plano 3D
        self.set_camera_orientation(phi=2 * PI / 5, theta=PI / 5, focal_distance=100)
        axes = ThreeDAxes(x_range=[-3, 3, 1],
                          y_range=[-3, 3, 1],
                          z_range=[-3, 3, 1])
        labels = axes.get_axis_labels(Text("x").scale(1), Text("y").scale(1), Text("z").scale(1))
        axes.shift(2.5 * RIGHT, 2.5 * DOWN)
        labels.shift(2.5 * RIGHT, 2.5 * DOWN)
        self.play(Create(axes), Create(labels))
        self.wait(2)

        p_r_igualdad3 = MathTex("a - d = lw - tu - sv ... (1)", font_size=28)
        p_r_igualdad3.shift(3.5*RIGHT, 2.5*UP)
        self.add_fixed_in_frame_mobjects(p_r_igualdad3)
        self.wait(1)

        texto1 = Text("Supongamos los vectores u, v, w se ven asi", font_size=16)
        texto1.next_to(p_r_igualdad3, DOWN)
        texto1.shift(0.4*LEFT)
        self.add_fixed_in_frame_mobjects(texto1)

        # Creacion de los vectores v, u y w
        vectorU = Arrow3D(start=np.array([0, 0, 0]), end=np.array([1, 0, 0]), color=BLUE)
        vectorV = Arrow3D(start=np.array([0, 0, 0]), end=np.array([0, 1, 0]), color=RED)
        vectorW = Arrow3D(start=np.array([0, 0, 0]), end=np.array([1, 1, 1]), color=GREEN)
        vectorU.shift(2.5 * RIGHT, 2.5 * DOWN)
        vectorV.shift(2.5 * RIGHT, 2.5 * DOWN)
        vectorW.shift(2.5 * RIGHT, 2.5 * DOWN)
        self.play(Create(vectorU), Create(vectorV), Create(vectorW))
        self.wait(2)

        # Demostracion de la formula para l
        texto2 = Text("Ahora intentaremos hallar l:", font_size=16)
        texto2.next_to(texto1, DOWN)
        texto2.align_to(texto1, LEFT)
        self.add_fixed_in_frame_mobjects(texto2)
        self.wait(2)
        self.remove(vectorW)
        self.remove(texto1)

        texto3 = Text("Para ello multiplicamos a (1) el vector (u x v)", font_size=16)
        texto3.next_to(texto2, DOWN)
        texto3.align_to(texto2, LEFT)
        self.add_fixed_in_frame_mobjects(texto3)
        self.wait(2)
        texto4 = Text("(u x v)  =", font_size=16)
        texto4.next_to(texto3, 2.5*DOWN)
        texto4.shift(LEFT)
        UxV = Matrix([["i", "j", "k"],["a", "b", "c"],["d", "e", "f"]])
        UxV.scale(0.5)
        UxV.next_to(texto4, RIGHT)
        self.add_fixed_in_frame_mobjects(texto4,UxV)
        self.wait(3)
        self.remove(UxV)

        UxV_r = Matrix([["(bf - ce)"], ["-(af - cd)"], ["(ae - bd)"]])
        UxV_r.scale(0.5).set_color(PURPLE)
        UxV_r.next_to(texto4, RIGHT)
        self.add_fixed_in_frame_mobjects(UxV_r)
        self.wait(1)

        vectorUV = Arrow3D(start=np.array([0, 0, 0]), end=np.array([0, 0, 1]), color=PURPLE)
        vectorUV.shift(2.5 * RIGHT, 2.5 * DOWN)
        self.play(Create(vectorUV))
        self.wait(2)

        # Multiplicacion de vectores perpendiculares 1
        texto5 = Text("(u x v) * v", font_size=16)
        texto5.next_to(texto4, 2.5*DOWN)
        texto5.align_to(texto4, LEFT)
        self.add_fixed_in_frame_mobjects(texto5)
        self.wait(2)
        resol1_texto5 = Text("= a(bf - ce) - b(af - cd) + c(ae - bd)", font_size=16)
        resol1_texto5.next_to(texto5, DOWN)
        resol1_texto5.align_to(texto5, LEFT)
        self.add_fixed_in_frame_mobjects(resol1_texto5)
        self.wait(2)
        resol2_texto5 = Text("= abf - ace - abf + bcd + ace - bcd = 0", font_size=16)
        resol2_texto5.next_to(resol1_texto5, DOWN)
        resol2_texto5.align_to(resol1_texto5, LEFT)
        self.add_fixed_in_frame_mobjects(resol2_texto5)
        self.wait(3)

        self.remove(texto5, resol1_texto5, resol2_texto5)

        # Multiplicacion de vectores perpendiculares 2
        texto5 = Text("(u x v) * u", font_size=16)
        texto5.next_to(texto4, 2.5*DOWN)
        texto5.align_to(texto4, LEFT)
        self.add_fixed_in_frame_mobjects(texto5)
        self.wait(2)
        resol1_texto5 = Text("= d(bf - ce) - e(af - cd) + f(ae - bd)", font_size=16)
        resol1_texto5.next_to(texto5, DOWN)
        resol1_texto5.align_to(texto5, LEFT)
        self.add_fixed_in_frame_mobjects(resol1_texto5)
        self.wait(2)
        resol2_texto5 = Text("= bdf - cde - aef + cde + aef - bdf = 0", font_size=16)
        resol2_texto5.next_to(resol1_texto5, DOWN)
        resol2_texto5.align_to(resol1_texto5, LEFT)
        self.add_fixed_in_frame_mobjects(resol2_texto5)
        self.wait(3)

        self.remove(texto5, resol1_texto5, resol2_texto5)
        self.remove(texto3, texto4, UxV_r)

        texto3 = Text("La multiplicacion escalar a vectores perpendiculares", font_size=16)
        texto3.next_to(texto2, DOWN)
        texto3.align_to(texto2, LEFT)
        self.add_fixed_in_frame_mobjects(texto3)
        self.wait(2)
        texto4 = Text("Da como resultado: 0", font_size=16)
        texto4.set_color(RED)
        texto4.next_to(texto3, DOWN)
        texto4.align_to(texto3, LEFT)
        self.add_fixed_in_frame_mobjects(texto4)
        self.wait(1)
        texto5 = Text("Por ende los vectores 'tu' y 'sv' se anulan", font_size=16)
        texto5.next_to(texto4, DOWN)
        texto5.align_to(texto4, LEFT)
        self.add_fixed_in_frame_mobjects(texto5)
        self.wait(2)
        texto6 = Text("Dando como resultado lo siguiente:", font_size=16)
        texto6.next_to(texto5, DOWN)
        texto6.align_to(texto5, LEFT)
        self.add_fixed_in_frame_mobjects(texto6)
        self.wait(1)
        resultado1 = Text("(u x v)*a - (uxv)*d = (u x v)*lw", font_size=16)
        resultado1.next_to(texto6, DOWN)
        resultado1.align_to(texto6, LEFT)
        self.add_fixed_in_frame_mobjects(resultado1)
        self.wait(2)
        resultado2 = Text("((u x v)*a - (u x v)*d) / (u x v)*w = l", font_size=16)
        resultado2.next_to(resultado1, DOWN)
        resultado2.align_to(resultado1, LEFT)
        self.add_fixed_in_frame_mobjects(resultado2)
        self.wait(3)

        self.remove(texto2, texto3, texto4, texto5, texto6, resultado1, resultado2, vectorU, vectorUV, UxV_r)

        ###############################################################################################################
        # Repito la demostracion para s y t
        texto1 = Text("Bajo esta misma logica podemos hallar t y s", font_size=16)
        texto1.next_to(p_r_igualdad3, DOWN)
        texto1.shift(0.4 * LEFT)
        self.add_fixed_in_frame_mobjects(texto1)
        self.wait(2)

        # Procedimiento para t
        vectorW = Arrow3D(start=np.array([0, 0, 0]), end=np.array([1, 1, 1]), color=GREEN)
        vectorW.shift(2.5 * RIGHT, 2.5 * DOWN)
        self.play(Create(vectorW))
        self.wait(2)

        texto2 = Text("Multiplicamos a (1) el vector (v x w)", font_size=16)
        texto2.next_to(texto1, DOWN)
        texto2.align_to(texto1, LEFT)
        self.add_fixed_in_frame_mobjects(texto2)
        self.wait(1)
        texto3 = Text("(v x w)  =", font_size=16)
        texto3.next_to(texto2, 2.5 * DOWN)
        texto3.shift(LEFT)
        VxW = Matrix([["i", "j", "k"], ["d", "e", "f"], ["g", "h", "n"]])
        VxW.scale(0.5)
        VxW.next_to(texto3, RIGHT)
        self.add_fixed_in_frame_mobjects(texto3, VxW)
        self.wait(3)
        self.remove(VxW)

        VxW_r = Matrix([["(en - fh)"], ["-(dn - fg)"], ["(dh - eg)"]])
        VxW_r.scale(0.5).set_color(PURPLE)
        VxW_r.next_to(texto3, RIGHT)
        self.add_fixed_in_frame_mobjects(VxW_r)
        self.wait(1)

        vectorVW = Arrow3D(start=np.array([0, 0, 0]), end=np.array([1, 0, -1]), color=PURPLE)
        vectorVW.shift(2.5 * RIGHT, 2.5 * DOWN)
        self.play(Create(vectorVW))
        self.wait(2)

        texto4 = Text("'sv' y 'lw' son perpendiculares a (v x w)", font_size=16)
        texto4.next_to(texto3, 2.5*DOWN)
        texto4.align_to(texto3, LEFT)
        self.add_fixed_in_frame_mobjects(texto4)
        self.wait(2)
        texto5 = Text("Por ende los vectores 'tu' y 'sv' se anulan", font_size=16)
        texto5.next_to(texto4, DOWN)
        texto5.align_to(texto4, LEFT)
        self.add_fixed_in_frame_mobjects(texto5)
        self.wait(2)
        texto6 = Text("Dando como resultado lo siguiente:", font_size=16)
        texto6.next_to(texto5, DOWN)
        texto6.align_to(texto5, LEFT)
        self.add_fixed_in_frame_mobjects(texto6)
        self.wait(1)
        resultado1 = Text("(v x w)*a - (v x w)*d = (v x w)*tu", font_size=16)
        resultado1.next_to(texto6, DOWN)
        resultado1.align_to(texto6, LEFT)
        self.add_fixed_in_frame_mobjects(resultado1)
        self.wait(2)
        resultado2 = Text("((v x w)*a - (v x w)*d) / (v x w)*u = t", font_size=16)
        resultado2.next_to(resultado1, DOWN)
        resultado2.align_to(resultado1, LEFT)
        self.add_fixed_in_frame_mobjects(resultado2)
        self.wait(3)

        self.remove(texto2, texto3, texto4, texto5, texto6, resultado1, resultado2, VxW_r, vectorV, vectorVW)
        vectorU = Arrow3D(start=np.array([0, 0, 0]), end=np.array([1, 0, 0]), color=RED)
        vectorU.shift(2.5 * RIGHT, 2.5 * DOWN)
        self.play(Create(vectorU))

        # Procedimiento para s
        texto2 = Text("Multiplicamos a (1) el vector (u x w)", font_size=16)
        texto2.next_to(texto1, DOWN)
        texto2.align_to(texto1, LEFT)
        self.add_fixed_in_frame_mobjects(texto2)
        self.wait(1)
        texto3 = Text("(u x w)  =", font_size=16)
        texto3.next_to(texto2, 2.5 * DOWN)
        texto3.shift(LEFT)
        UxW = Matrix([["i", "j", "k"], ["a", "b", "c"], ["g", "h", "n"]])
        UxW.scale(0.5)
        UxW.next_to(texto3, RIGHT)
        self.add_fixed_in_frame_mobjects(texto3, UxW)
        self.wait(3)
        self.remove(UxW)

        UxW_r = Matrix([["(bn - ch)"], ["-(an - cg)"], ["(ah - bg)"]])
        UxW_r.scale(0.5).set_color(PURPLE)
        UxW_r.next_to(texto3, RIGHT)
        self.add_fixed_in_frame_mobjects(UxW_r)
        self.wait(1)

        vectorUW = Arrow3D(start=np.array([0, 0, 0]), end=np.array([0, -1, 1]), color=PURPLE)
        vectorUW.shift(2.5 * RIGHT, 2.5 * DOWN)
        self.play(Create(vectorUW))
        self.wait(2)

        texto4 = Text("'tu' y 'lw' son perpendiculares a (u x w)", font_size=16)
        texto4.next_to(texto3, 2.5*DOWN)
        texto4.align_to(texto3, LEFT)
        self.add_fixed_in_frame_mobjects(texto4)
        self.wait(2)
        texto5 = Text("Por ende los vectores 'tu' y 'lw' se anulan", font_size=16)
        texto5.next_to(texto4, DOWN)
        texto5.align_to(texto4, LEFT)
        self.add_fixed_in_frame_mobjects(texto5)
        self.wait(2)
        texto6 = Text("Dando como resultado lo siguiente:", font_size=16)
        texto6.next_to(texto5, DOWN)
        texto6.align_to(texto5, LEFT)
        self.add_fixed_in_frame_mobjects(texto6)
        self.wait(1)
        resultado1 = Text("(u x w)*a - (u x w)*d = (u x w)*sv", font_size=16)
        resultado1.next_to(texto6, DOWN)
        resultado1.align_to(texto6, LEFT)
        self.add_fixed_in_frame_mobjects(resultado1)
        self.wait(2)
        resultado2 = Text("((u x w)*a - (u x w)*d) / (u x w)*v = s", font_size=16)
        resultado2.next_to(resultado1, DOWN)
        resultado2.align_to(resultado1, LEFT)
        self.add_fixed_in_frame_mobjects(resultado2)
        self.wait(3)

config.frame_width = 12
config.frame_height = 12